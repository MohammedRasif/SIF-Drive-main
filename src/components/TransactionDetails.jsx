import React, { useState } from "react";
import { useTranslation } from "react-i18next";
import jsPDF from "jspdf";
const TransactionDetails = ({ transaction }) => {
  const { t } = useTranslation();
  const [isGeneratingPDF, setIsGeneratingPDF] = useState(false);

  if (!transaction) return null;
  // Function to download PDF
  const handleDownloadPDF = async () => {
    if (isGeneratingPDF) return;

    setIsGeneratingPDF(true);

    try {
      // Create new PDF document
      const doc = new jsPDF();

      // Add title
      doc.setFontSize(20);
      doc.setFont("helvetica", "bold");
      doc.text(t("transactionDetails.title"), 105, 20, { align: "center" });

      // Add subtitle
      doc.setFontSize(12);
      doc.setFont("helvetica", "normal");
      doc.text(`Transaction #${transaction.trId}`, 105, 30, {
        align: "center",
      });

      // Add generation date
      const now = new Date().toLocaleDateString("en-GB", {
        day: "2-digit",
        month: "short",
        year: "numeric",
        hour: "2-digit",
        minute: "2-digit",
      });
      doc.text(`${t("transactionDetails.generated")}: ${now}`, 105, 38, {
        align: "center",
      });

      // Add line separator
      doc.setLineWidth(0.5);
      doc.line(20, 45, 190, 45);

      // Prepare data for manual table
      const tableData = [
        [t("transactionDetails.transactionId"), `#${transaction.trId}`],
        [t("transactionDetails.date"), transaction.date],
        [t("transactionDetails.userName"), transaction.userName],
        [t("transactionDetails.accountNumber"), transaction.accountNumber],
        [t("transactionDetails.accountHolder"), transaction.accountHolder],
        [t("transactionDetails.amount"), transaction.amount],
        [
          t("transactionDetails.email"),
          transaction.email || t("transactionDetails.notProvided"),
        ],
      ];

      // Manually create table
      let yPosition = 55;
      const startX = 20;
      const cellWidth1 = 60;
      const cellWidth2 = 110;
      const cellHeight = 8;
      const rowHeight = 12;

      // Header
      doc.setFillColor(7, 19, 82); // #071352
      doc.setTextColor(255, 255, 255);
      doc.setFont("helvetica", "bold");
      doc.setFontSize(10);

      // Header background
      doc.rect(startX, yPosition, cellWidth1 + cellWidth2, rowHeight, "F");

      // Header text
      doc.text(t("transactionDetails.field"), startX + 5, yPosition + 8);
      doc.text(
        t("transactionDetails.value"),
        startX + cellWidth1 + 5,
        yPosition + 8
      );

      yPosition += rowHeight;

      // Table border
      doc.setDrawColor(0, 0, 0);
      doc.setLineWidth(0.1);
      doc.rect(startX, 55, cellWidth1 + cellWidth2, rowHeight, "S");

      // Data rows
      doc.setTextColor(0, 0, 0);
      doc.setFont("helvetica", "normal");

      tableData.forEach((row, index) => {
        const isEvenRow = index % 2 === 0;

        if (isEvenRow) {
          doc.setFillColor(219, 222, 239); // #DBDEEF
          doc.rect(startX, yPosition, cellWidth1 + cellWidth2, rowHeight, "F");
        }

        // Cell borders
        doc.rect(startX, yPosition, cellWidth1, rowHeight, "S");
        doc.rect(startX + cellWidth1, yPosition, cellWidth2, rowHeight, "S");

        // Text
        doc.text(row[0].toString(), startX + 5, yPosition + 8);
        doc.text(row[1].toString(), startX + cellWidth1 + 5, yPosition + 8);

        yPosition += rowHeight;
      });

      // Final border for last row
      doc.rect(
        startX,
        yPosition - rowHeight,
        cellWidth1 + cellWidth2,
        rowHeight,
        "S"
      );

      // Add footer
      const finalY = yPosition + 10;
      doc.setFontSize(8);
      doc.setFont("helvetica", "italic");
      doc.text("Generated by Transaction Management System", 105, finalY, {
        align: "center",
      });

      // Generate filename
      const filename = `Transaction_${transaction.trId}_${Date.now()}.pdf`;

      // Download PDF
      doc.save(filename);
    } catch (error) {
      console.error("Error generating PDF:", error);
      alert(t("transactionDetails.pdfError"));
    } finally {
      setIsGeneratingPDF(false);
    }
  };

  // Function to print
  const handlePrint = () => {
    // Create a print-friendly version
    const printWindow = window.open("", "_blank", "width=800,height=600");

    const printContent = `
      <!DOCTYPE html>
      <html>
        <head>
          <title>${t("transactionDetails.title")} - #${transaction.trId}</title>
          <style>
            body {
              font-family: Arial, sans-serif;
              margin: 20px;
              color: #121212;
              background: white;
              line-height: 1.6;
            }
            .header {
              text-align: center;
              margin-bottom: 30px;
              border-bottom: 2px solid #071352;
              padding-bottom: 10px;
            }
            .header h1 {
              color: #071352;
              font-size: 24px;
              margin: 0;
              font-weight: bold;
            }
            .header p {
              color: #666;
              margin: 5px 0 0 0;
              font-size: 14px;
            }
            .transaction-details {
              max-width: 600px;
              margin: 0 auto;
            }
            .detail-row {
              display: flex;
              justify-content: space-between;
              padding: 12px 0;
              border-bottom: 1px solid #e5e7eb;
            }
            .detail-row:last-child {
              border-bottom: none;
            }
            .label {
              font-weight: 600;
              color: #374151;
              min-width: 150px;
            }
            .value {
              font-weight: 500;
              color: #111827;
              text-align: right;
            }
            .amount {
              color: #059669;
              font-weight: bold;
              font-size: 16px;
            }
            .footer {
              margin-top: 40px;
              text-align: center;
              color: #6b7280;
              font-size: 12px;
              padding-top: 20px;
              border-top: 1px solid #e5e7eb;
            }
            @media print {
              body { margin: 0; }
              .no-print { display: none; }
            }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>${t("transactionDetails.title")}</h1>
            <p>Transaction #${transaction.trId}</p>
            <p>Printed: ${new Date().toLocaleString()}</p>
          </div>
          
          <div class="transaction-details">
            <div class="detail-row">
              <span class="label">${t(
                "transactionDetails.transactionId"
              )}:</span>
              <span class="value">#${transaction.trId}</span>
            </div>
            
            <div class="detail-row">
              <span class="label">${t("transactionDetails.date")}:</span>
              <span class="value">${transaction.date}</span>
            </div>
            
            <div class="detail-row">
              <span class="label">${t("transactionDetails.userName")}:</span>
              <span class="value">${transaction.userName}</span>
            </div>
            
            <div class="detail-row">
              <span class="label">${t(
                "transactionDetails.accountNumber"
              )}:</span>
              <span class="value">${transaction.accountNumber}</span>
            </div>
            
            <div class="detail-row">
              <span class="label">${t(
                "transactionDetails.accountHolder"
              )}:</span>
              <span class="value">${transaction.accountHolder}</span>
            </div>
            
            <div class="detail-row">
              <span class="label">${t("transactionDetails.amount")}:</span>
              <span class="value amount">${transaction.amount}</span>
            </div>
            
            <div class="detail-row">
              <span class="label">${t("transactionDetails.email")}:</span>
              <span class="value">${
                transaction.email || t("transactionDetails.notProvided")
              }</span>
            </div>
          </div>
          
          <div class="footer">
            <p>Generated by Transaction Management System</p>
            <p>This is a computer-generated document</p>
          </div>
          
          <script>
            window.onload = function() { window.print(); window.close(); };
          </script>
        </body>
      </html>
    `;

    printWindow.document.write(printContent);
    printWindow.document.close();
  };

  return (
    <div className="max-w-md md:w-md mx-auto rounded-lg overflow-hidden">
      <div className="text-center mb-6 text-2xl text-gray-700">
        <h1>{t("transactionDetails.title")}</h1>
      </div>

      <div className="divide-y divide-gray-300">
        <div className="flex justify-between items-center px-6 py-4">
          <span className="text-gray-600 font-medium">
            {t("transactionDetails.transactionId")} :
          </span>
          <span className="text-gray-800 font-semibold">
            #{transaction.trId}
          </span>
        </div>

        <div className="flex justify-between items-center px-6 py-4">
          <span className="text-gray-600 font-medium">
            {t("transactionDetails.date")} :
          </span>
          <span className="text-gray-800 font-semibold">
            {transaction.date}
          </span>
        </div>

        <div className="flex justify-between items-center px-6 py-4">
          <span className="text-gray-600 font-medium">
            {t("transactionDetails.userName")} :
          </span>
          <span className="text-gray-800 font-semibold">
            {transaction.userName}
          </span>
        </div>

        <div className="flex justify-between items-center px-6 py-4">
          <span className="text-gray-600 font-medium">
            {t("transactionDetails.accountNumber")} :
          </span>
          <span className="text-gray-800 font-semibold">
            {transaction.accountNumber || "**** **** **** *545"}
          </span>
        </div>

        <div className="flex justify-between items-center px-6 py-4">
          <span className="text-gray-600 font-medium">
            {t("transactionDetails.accountHolder")} :
          </span>
          <span className="text-gray-800 font-semibold">
            {transaction.accountHolder || transaction.userName}
          </span>
        </div>

        <div className="flex justify-between items-center px-6 py-4">
          <span className="text-gray-600 font-medium">
            {t("transactionDetails.amount")} :
          </span>
          <span className="text-gray-800 font-semibold">
            {transaction.amount}
          </span>
        </div>

        <div className="flex justify-between items-center px-6 py-4">
          <span className="text-gray-600 font-medium">
            {t("transactionDetails.email")} :
          </span>
          <span className="text-gray-800 font-semibold">
            {transaction.email || t("transactionDetails.notProvided")}
          </span>
        </div>
      </div>

      <div className="flex gap-4 px-6 py-6">
        <button
          onClick={handleDownloadPDF}
          disabled={isGeneratingPDF}
          className={`flex-1/2 bg-white text-[#071352] border-2 border-[#071352] px-6 py-3 rounded-full font-semibold transition-all duration-200 hover:cursor-pointer ${
            isGeneratingPDF
              ? "opacity-50 cursor-not-allowed"
              : "hover:bg-blue-50 hover:border-[#0023CF]"
          }`}
        >
          {isGeneratingPDF ? (
            <span className="flex items-center justify-center">
              <svg
                className="animate-spin -ml-1 mr-2 h-4 w-4 text-[#071352]"
                fill="none"
                viewBox="0 0 24 24"
              >
                <circle
                  className="opacity-25"
                  cx="12"
                  cy="12"
                  r="10"
                  stroke="currentColor"
                  strokeWidth="4"
                ></circle>
                <path
                  className="opacity-75"
                  fill="currentColor"
                  d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                ></path>
              </svg>
              Generating...
            </span>
          ) : (
            t("transactionDetails.download")
          )}
        </button>

        <button
          onClick={handlePrint}
          className="flex-1/2 bg-gradient-to-r from-[#071352] to-[#0023CF] rounded-full text-white font-bold px-6 py-3 transition-all duration-200 hover:from-[#0023CF] hover:to-[#071352] hover:shadow-lg hover:scale-[1.02] hover:cursor-pointer"
        >
          {t("transactionDetails.print")}
        </button>
      </div>
    </div>
  );
};

export default TransactionDetails;
